{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Gemini/","title":"Getting Started: Gemini Cookbook Setup","text":"<p>This guide provides step-by-step instructions to set up your local environment and Google Cloud project to follow the recipes in the Gemini Cookbook.</p>"},{"location":"Gemini/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Python: Version 3.8 or higher.</li> <li>Google Cloud Account: An active GCP account with billing enabled. If you're new, you can sign up for a free trial.</li> <li>Basic Knowledge: Familiarity with Python, the command line, and Git.</li> </ul>"},{"location":"Gemini/#1-environment-setup","title":"1. Environment Setup","text":"<p>First, let's set up the project on your local machine.</p>"},{"location":"Gemini/#clone-the-repository","title":"Clone the Repository","text":"<p>Open your terminal and clone the cookbook's GitHub repository:</p> <pre><code>git clone https://github.com/msampathkumar/msampathkumar.github.io.git\ncd msampathkumar.github.io\n</code></pre>"},{"location":"Gemini/#set-up-a-virtual-environment","title":"Set Up a Virtual Environment","text":"<p>It's a best practice to use a virtual environment to manage project dependencies.</p> <pre><code># Create a virtual environment\npython3 -m venv .venv\n\n# Activate the virtual environment\n# On macOS and Linux:\nsource .venv/bin/activate\n# On Windows:\n# .\\.venv\\Scripts\\activate\n</code></pre>"},{"location":"Gemini/#install-dependencies","title":"Install Dependencies","text":"<p>Install the common Python packages needed for the cookbook examples:</p> <pre><code>pip install google-generativeai google-cloud-aiplatform streamlit python-dotenv\n</code></pre>"},{"location":"Gemini/#2-google-cloud-configuration-cli","title":"2. Google Cloud Configuration (CLI)","text":"<p>Next, configure the Google Cloud CLI (<code>gcloud</code>) to interact with your GCP project.</p>"},{"location":"Gemini/#install-and-initialize-google-cloud-sdk","title":"Install and Initialize Google Cloud SDK","text":"<p>If you don't have it, install the Google Cloud SDK. After installation, initialize it:</p> <pre><code>gcloud init\n</code></pre> <p>Follow the on-screen prompts to log in, select your GCP project, and set a default region.</p>"},{"location":"Gemini/#authenticate-for-local-development","title":"Authenticate for Local Development","text":"<p>For local development, authenticating with your user credentials is the easiest way to get started.</p> <pre><code>gcloud auth application-default login\n</code></pre>"},{"location":"Gemini/#enable-required-apis","title":"Enable Required APIs","text":"<p>You need to enable the Vertex AI API to use Gemini models.</p> <pre><code># Set your project ID (if you didn't during gcloud init)\nexport PROJECT_ID=\"your-gcp-project-id\"\ngcloud config set project $PROJECT_ID\n\n# Enable the Vertex AI API\ngcloud services enable aiplatform.googleapis.com --project $PROJECT_ID\n</code></pre> <p>Note: Replace <code>your-gcp-project-id</code> with your actual Google Cloud Project ID.</p>"},{"location":"Gemini/#next-steps","title":"Next Steps","text":"<p>You are all set! Your environment is configured and you're ready to start building with Gemini.</p> <p>Head over to the Full Lesson Plan to see all the available recipes.</p>"},{"location":"HelloWorld/","title":"Hello World","text":"<p>this is an example!</p>"},{"location":"cookbook/","title":"Google Cloud Gemini Cookbook: A Practical Guide to Learn Fundamentals and Build Applications","text":""},{"location":"cookbook/#vision-executive-summary","title":"Vision &amp; Executive Summary","text":"<p>This project is a cookbook-style series designed to teach developers and AI enthusiasts how to build practical, real-world applications using Google Cloud's Gemini models. Through a series of hands-on blog posts and a central GitHub repository, this guide will provide clear, step-by-step instructions, making generative AI accessible even to those with limited prior experience. The goal is to empower builders, foster a collaborative community, and showcase the power of Gemini.</p>"},{"location":"cookbook/#guiding-principles","title":"Guiding Principles","text":"<ul> <li>Practical First: Focus on hands-on examples and code snippets that solve real problems.</li> <li>Clarity and Simplicity: Provide clear, step-by-step instructions that are easy to follow.</li> <li>Gemini Focused: Deep-dive into Google Cloud Gemini, its specific features, and its ecosystem.</li> <li>Fundamental Concepts: Cover the necessary foundational knowledge to use Gemini effectively.</li> </ul>"},{"location":"cookbook/#target-audience","title":"Target Audience","text":"<p>This series is for developers, AI enthusiasts, and anyone interested in learning how to build practical AI applications with Gemini.</p>"},{"location":"cookbook/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic Python programming knowledge.</li> <li>A Google Cloud Platform (GCP) account with billing enabled.</li> <li>Familiarity with the command line and GitHub is helpful.</li> </ul>"},{"location":"cookbook/#content-outline-lesson-plan","title":"Content Outline &amp; Lesson Plan","text":"<p>The series will be released as a sequence of lessons, each building upon the last.</p> <ul> <li> <p>Lesson 1: Building a Basic Chatbot with Gemini and Streamlit</p> <ul> <li>Objective: Introduce the fundamentals of the Gemini API and build a simple, interactive chatbot and deploy to Cloud.</li> <li>Core Concepts: API keys, model initialization, generating text, streaming responses.</li> <li>Tech Stack: Python, <code>google-genai</code> SDK, Streamlit.</li> </ul> </li> <li> <p>Lesson 2: Enhancing the Chatbot with Memory and Gemma</p> <ul> <li>Objective: Add conversational memory to the chatbot and explore using open models like Gemma for specific tasks.</li> <li>Core Concepts: Chat history management, context passing, integrating local/open-source models.</li> <li>Tech Stack: Vertex AI Memory Bank, Gemma, (Optional) Google ADK.</li> </ul> </li> </ul>"},{"location":"cookbook/#future-lessons-proposed-agenda","title":"Future Lessons (Proposed Agenda)","text":"<ul> <li> <p>Lesson 3: Unlocking Multimodality with Gemini Pro Vision</p> <ul> <li>Objective: Build an application that can understand and analyze information from both images and text simultaneously.</li> <li>Use Case Example: An app that takes a picture of a whiteboard diagram and generates code, or identifies products in an image and searches for them online.</li> <li>Core Concepts: Multimodal prompts, image data handling, combining visual and text inputs, prompt engineering for vision models.</li> </ul> </li> <li> <p>Lesson 4: Building a Knowledge Base Q&amp;A with RAG</p> <ul> <li>Objective: Create a Retrieval-Augmented Generation (RAG) system that answers questions based on a custom document set (e.g., PDFs, text files).</li> <li>Use Case Example: A chatbot that can answer questions about a company\u2019s internal policy documents.</li> <li>Core Concepts: Vector embeddings, vector databases (e.g., ChromaDB, Pinecone), document chunking, semantic search.</li> </ul> </li> <li> <p>Lesson 5: Advanced RAG with Knowledge Graphs</p> <ul> <li>Objective: Go beyond simple vector search by building a RAG system that understands the relationships between entities in your data, leading to more accurate and context-aware answers.</li> <li>Use Case Example: A financial analyst bot that can answer complex queries like \"Which companies in our portfolio have board members who also sit on the boards of their competitors?\"</li> <li>Core Concepts: Entity and relationship extraction, building a knowledge graph (e.g., with Neo4j), translating natural language to graph queries (e.g., Cypher), combining graph retrieval with LLM generation.</li> </ul> </li> <li> <p>Lesson 6: Creating Autonomous Agents with Function Calling</p> <ul> <li>Objective: Empower Gemini to interact with external tools and APIs to perform actions in the real world.</li> <li>Use Case Example: A personal assistant that can check the weather, send an email, or book a meeting by calling external APIs.</li> <li>Core Concepts: Tool definition, function calling, structured data extraction, handling API errors and responses.</li> </ul> </li> <li> <p>Lesson 7: Building Collaborative AI with Multi-Agent Systems</p> <ul> <li>Objective: Design a system where multiple specialized AI agents collaborate to solve a complex problem that a single agent could not handle alone.</li> <li>Use Case Example: A research team with a \"Web Search\" agent, a \"Data Analyst\" agent, and a \"Report Writer\" agent that work together to produce a market analysis.</li> <li>Core Concepts: Agent roles and specialization, inter-agent communication, task decomposition, state management, and using a manager/orchestrator agent.</li> </ul> </li> <li> <p>Lesson 8: Practical AI Safety and Model Evaluation</p> <ul> <li>Objective: Learn to build responsible, reliable AI applications and objectively measure their performance before they reach production.</li> <li>Use Case Example: Adding a validation step to a customer service bot to ensure its answers are factually correct and non-toxic before sending them to a user.</li> <li>Core Concepts: Implementing guardrails, protecting against prompt injection, detecting and mitigating bias, using evaluation frameworks (e.g., RAGAs, TruLens) to measure faithfulness and relevance.</li> </ul> </li> <li> <p>Lesson 9: Deploying and Scaling on Google Cloud</p> <ul> <li>Objective: Take a prototype application and prepare it for production.</li> <li>Core Concepts: Containerizing with Docker, deploying to Cloud Run, managing API keys securely with Secret Manager, monitoring and logging.</li> </ul> </li> </ul>"},{"location":"cookbook/#distribution-community-strategy","title":"Distribution &amp; Community Strategy","text":"<ul> <li>Source of Truth: A public GitHub repository will host all code, resources, and drafts.</li> <li>Primary Publications: Blog posts will be published on Medium.com and Dev.to to reach a broad developer audience.</li> <li>Community Engagement: Announcements, key takeaways, and discussions will be shared on X (formerly Twitter) and LinkedIn to foster community interaction and feedback.</li> </ul>"},{"location":"cookbook/#potential-impact-success-metrics","title":"Potential Impact &amp; Success Metrics","text":"<ul> <li>Empower Developers: Lower the barrier to entry for building and deploying AI-powered applications.</li> <li>Foster Community: Create a hub for Gemini users to share knowledge, collaborate, and get feedback.</li> <li>Showcase Gemini: Highlight the versatility and power of Gemini for solving real-world problems.</li> <li>Success Metrics: Track GitHub stars/forks, blog post views/claps, social media engagement, and community contributions.</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"google-cloud-gemini-cookbook/","title":"Google Cloud - Gemini Cookbook","text":""},{"location":"google-cloud-gemini-cookbook/#introduction","title":"Introduction","text":"<p>This cookbook is a collection of recipes for using the Google Cloud platform.</p>"},{"location":"google-cloud-gemini-cookbook/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Google account with access to the Google Cloud Platform.</li> <li>A valid API key or service account credentials.</li> <li>A working Python environment (Python &gt;= 3.8).</li> </ul>"},{"location":"google-cloud-gemini-cookbook/#lessons","title":"Lessons","text":"<ul> <li>Lesson 1: Building a Streamlit App with Gemini Pro Vision</li> <li>Lesson 2: Building a Chatbot with Streamlit and Gemini</li> </ul>"},{"location":"google-cloud-gemini-cookbook/lesson-01/","title":"Lesson 01: Deploying a Streamlit App to Google Cloud Run","text":"<p>In this lesson, you'll learn how to deploy a Streamlit web app to Google Cloud Run with ease.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#what-youll-learn","title":"What you'll learn","text":"<ul> <li>What Streamlit is and why you should use it.</li> <li>How to build a simple Streamlit application.</li> <li>What Cloud Run is and why it's a great choice for deploying serverless applications.</li> <li>How to deploy a Streamlit application directly to Cloud Run from your source code.</li> </ul>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Google Cloud Project with billing enabled.</li> <li>The <code>gcloud</code> CLI installed and configured.</li> <li>Python 3.8 or later.</li> </ul> <p>For development, we recommend using the Google Cloud Shell, which comes pre-installed with the necessary tools.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#what-is-streamlit","title":"What is Streamlit?","text":"<p>Streamlit is an open-source Python framework that makes it easy to create and share beautiful, custom web apps for machine learning and data science. In just a few lines of code, you can build and deploy powerful data apps.</p> <p>While Streamlit is not as feature-rich as full-fledged web frameworks like Django or Flask, its strength lies in its simplicity and ability to create highly interactive applications quickly. This makes it an excellent choice for building demos and prototypes.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#what-is-google-cloud-run","title":"What is Google Cloud Run?","text":"<p>Cloud Run is a fully managed serverless platform that enables you to run stateless containers that are invocable via web requests or Pub/Sub events. You can deploy your code to Cloud Run, and it will automatically scale up or down based on traffic.</p> <p>Here are some of the benefits of using Cloud Run:</p> <ul> <li>Easy to use: Deploy your application with a single command.</li> <li>Serverless: No infrastructure to manage.</li> <li>Scalable: Automatically scales to meet demand.</li> <li>Cost-effective: Pay only for the resources you use.</li> </ul>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#lets-get-started","title":"Let's get started!","text":""},{"location":"google-cloud-gemini-cookbook/lesson-01/#1-set-up-your-environment","title":"1. Set up your environment","text":"<p>Create a virtual environment and install the required dependencies:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#2-create-a-simple-streamlit-app","title":"2. Create a simple Streamlit app","text":"<p>Create a file named <code>streamlit_app.py</code> with the following content:</p> <pre><code>import streamlit as st\n\nst.title(\"Sample AI App\")\n\nst.text(\"This is a sample app.\")\n</code></pre>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#3-run-the-app-locally","title":"3. Run the app locally","text":"<p>To run the app locally, use the following command:</p> <pre><code>streamlit run streamlit_app.py --server.port 8080\n</code></pre> <p>You can now view your app by opening your browser and navigating to <code>http://localhost:8080</code>.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#4-deploy-to-cloud-run","title":"4. Deploy to Cloud Run","text":"<p>To deploy your app to Cloud Run, you'll need to create a <code>Procfile</code> and a <code>deploy.sh</code> script.</p> <p>Procfile</p> <p>Create a file named <code>Procfile</code> with the following content:</p> <pre><code>web: streamlit run streamlit_app.py --server.port=8080 --server.address=0.0.0.0 --server.enableCORS=false --browser.gatherUsageStats=false\n</code></pre> <p>This file tells Cloud Run how to start your application.</p> <p>deploy.sh</p> <p>Create a file named <code>deploy.sh</code> with the following content:</p> <pre><code>#!/bin/bash\n# Purpose: To deploy the App to Cloud Run.\n\n# Google Cloud Project ID\nPROJECT=\"your-gcp-project-id\"\n\n# Google Cloud Region\nLOCATION=\"us-central1\"\n\n# Deploy app from source code\ngcloud run deploy simple-app --source . --region=$LOCATION --project=$PROJECT --allow-unauthenticated\n</code></pre> <p>Important: Replace <code>\"your-gcp-project-id\"</code> with your actual Google Cloud Project ID.</p> <p>Now, run the deployment script:</p> <pre><code>bash deploy.sh\n</code></pre> <p>This command will build a container image from your source code, push it to the container registry, and deploy it to Cloud Run. Once the deployment is complete, you'll see a service URL in the output.</p> <p>Congratulations \ud83c\udf89! You have successfully deployed your Streamlit app to Cloud Run.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#cleanup","title":"Cleanup","text":"<p>To avoid incurring future charges, delete the resources you created:</p> <ul> <li>Go to the Cloud Run console and delete your application.</li> <li>Go to the Container Registry and delete the container image.</li> </ul>"},{"location":"google-cloud-gemini-cookbook/lesson-01/#learn-more","title":"Learn More","text":"<ul> <li>Cloud Run Documentation</li> <li>Streamlit Documentation</li> <li>Authenticating to Cloud Run</li> </ul>"},{"location":"google-cloud-gemini-cookbook/lesson-02/","title":"Lesson 2: Your First Conversational AI with Streamlit and Gemini","text":"<p>Welcome to the second lesson in our Gemini Cookbook series! This time, we're diving into the exciting world of conversational AI. You'll learn to build a smart, interactive chatbot using the power of Streamlit and Google's Gemini 1.5 Flash model. We'll be using the official Google Cloud Vertex AI SDK, which has powerful features like chat sessions that give your bot a memory.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#what-youll-create","title":"What You'll Create","text":"<p>Get ready to build a sleek, web-based chatbot. With Streamlit as our frontend, your chatbot will connect to the mighty Gemini 1.5 Flash model, enabling you to have dynamic and stateful conversations. It's like having your own personal AI assistant!</p> <p></p>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#what-youll-need","title":"What You'll Need","text":"<p>To get started, make sure you have the following essentials:</p> <ul> <li>A Google Cloud project with the Vertex AI API ready to go.</li> <li>Python 3.8 or a newer version.</li> <li>The <code>pip</code> package manager for installing our dependencies.</li> </ul>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#mandatory-steps","title":"Mandatory steps","text":"<p>This is a mandatory steps to access Gemini Models from your Google Cloud Project.</p> <p>I have installed the Gcloud tool and used Application Default Credentials to get the credentials.  If you want to run the code in Google Cloud project, then you need to update respective service-account with the required permissions. For details, check out this user-managed service account article.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#lets-get-building","title":"Let's Get Building!","text":"<ol> <li> <p>Get the Code: First, clone the repository and hop into the right directory:</p> <p><code>bash git clone https://github.com/msampathkumar/msampathkumar.github.io.git cd msampathkumar.github.io/docs/google-cloud-gemini-cookbook/lesson-02</code></p> </li> <li> <p>Set Up Your Workspace: Create a virtual environment to keep things tidy:</p> <p><code>bash python3 -m venv .venv source .venv/bin/activate</code></p> </li> <li> <p>Install the Magic: Time to install the necessary Python packages:</p> <p><code>bash pip install -r requirements.txt</code></p> </li> <li> <p>Connect to Google Cloud: Authenticate your local environment to use Google Cloud services:</p> </li> </ol> <pre><code>gcloud auth application-default login\n</code></pre>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#a-look-under-the-hood","title":"A Look Under the Hood","text":"<p>Let's take a peek at the code that makes our chatbot tick.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#the-chatbot-ui-streamlit_apppy","title":"The Chatbot UI: <code>streamlit_app.py</code>","text":"<p>This file is the heart of our Streamlit app. It's responsible for: *   Providing a chat interface for user input. *   Displaying the response from the model. *   Maintaining the conversation history.</p> <p>While you would typically use Streamlit's <code>session_state</code> to store the conversation history manually, the Vertex AI SDK simplifies this. We'll use a <code>ChatSession</code> object from the SDK, which automatically handles the history for us. We just need to store this one object in <code>st.session_state</code> to make our chat stateful.</p> <p>You can see the core logic below:</p> <pre><code>import streamlit as st\nimport llm\n\n# Initialize chat session in Streamlit's session state.\n# This will be run only once, on the first run of the session.\nif \"chat_session\" not in st.session_state:\n    st.session_state.chat_session = llm.start_chat()\n\n# Display chat history from the session state\nfor message in st.session_state.chat_session.history:\n    with st.chat_message(\"assistant\" if message.role == \"model\" else \"user\"):\n        st.markdown(message.parts[0].text)\n</code></pre>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#the-brains-of-the-operation-llmpy","title":"The Brains of the Operation: <code>llm.py</code>","text":"<p>This file handles all the communication with the Gemini 2.5 Flash model. As we are using GenAI SDK, we can use environment variables to set up the required details for authentication. Also, GenAI SDK provides us with <code>Client</code> class which we can use to create a chat session and send messages to the Gemini Model and receive.</p> <pre><code>from google import genai\n\n# Using environment variables to pass essential parameters to the client.\nclient = genai.Client()\n\n# Create chat session\nchat_session = client.chats.create(\"gemini-2.0-flash-lite-001\")\n</code></pre>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#to-run-chatbot-in-cli","title":"To run chatbot in CLI","text":"<pre><code>python llm.py\n</code></pre>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#to-run-streamlit-chatbot","title":"To run streamlit chatbot","text":"<pre><code>streamlit run streamlit_app.py\n</code></pre>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#deploy-the-application","title":"Deploy the application","text":"<p>You can deploy your chatbot to Google Cloud Run and share it with the world.</p> <p>Use the <code>deploy.sh</code> script to package your app into a Docker image and send it to the Google Artifact Registry.</p> <pre><code>./deploy.sh\n</code></pre> <p>The script will then deploy your app to Cloud Run, making it live on the web.</p>"},{"location":"google-cloud-gemini-cookbook/lesson-02/#you-did-it","title":"You Did It!","text":"<p>High five! You've built and deployed a fully functional chatbot with Streamlit and Gemini Pro. You've seen how to use the new Generative AI SDK and its chat features to create a more natural and engaging conversational experience. Now, go ahead and have a chat with your new AI friend!</p>"}]}